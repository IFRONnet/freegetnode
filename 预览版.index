<!-- 在 <style> 标签内添加鼠标特效相关样式 -->
<style>
    /* 在现有样式的末尾添加 */
    
    .cursor-effect {
        pointer-events: none;
        position: fixed;
        width: 20px;
        height: 20px;
        border-radius: 50%;
        background: var(--primary-color);
        transition: transform 0.1s;
        z-index: 9999;
        opacity: 0.6;
        mix-blend-mode: screen;
        display: none;
    }

    .cursor-trail {
        pointer-events: none;
        position: fixed;
        width: 8px;
        height: 8px;
        border-radius: 50%;
        background: var(--secondary-color);
        z-index: 9998;
        opacity: 0;
        display: none;
    }

    @media (hover: hover) {
        .cursor-effect, .cursor-trail {
            display: block;
        }
        
        * {
            cursor: none !important;
        }
        
        a, button, [role="button"] {
            cursor: none !important;
        }
    }

    .btn:hover ~ .cursor-effect {
        transform: scale(1.5);
        background: var(--accent-color);
        mix-blend-mode: screen;
    }
</style>

<!-- 在 <body> 标签末尾，在最后的 </script> 标签之前添加鼠标特效元素和脚本 -->
<div class="cursor-effect"></div>
<script>
    // 在现有的立即执行函数之后添加
    (() => {
        // 只在支持hover的设备上初始化鼠标特效
        if (window.matchMedia('(hover: hover)').matches) {
            const cursor = document.querySelector('.cursor-effect');
            const maxTrails = 10;
            const trails = [];
            let lastX = 0;
            let lastY = 0;
            let isMoving = false;
            let moveTimeout;

            // 创建轨迹元素
            for (let i = 0; i < maxTrails; i++) {
                const trail = document.createElement('div');
                trail.className = 'cursor-trail';
                document.body.appendChild(trail);
                trails.push({
                    element: trail,
                    x: 0,
                    y: 0,
                    alpha: 0
                });
            }

            // 处理鼠标移动
            const onMouseMove = (e) => {
                const { clientX, clientY } = e;
                
                // 更新主光标
                cursor.style.transform = `translate(${clientX - 10}px, ${clientY - 10}px)`;
                
                // 计算移动速度
                const speed = Math.hypot(clientX - lastX, clientY - lastY);
                
                // 更新轨迹
                trails.forEach((trail, index) => {
                    setTimeout(() => {
                        trail.x = clientX;
                        trail.y = clientY;
                        trail.alpha = Math.min(speed / 50, 0.5);
                        trail.element.style.transform = `translate(${trail.x - 4}px, ${trail.y - 4}px)`;
                        trail.element.style.opacity = trail.alpha;
                    }, index * 40);
                });

                lastX = clientX;
                lastY = clientY;
                
                // 重置移动状态
                isMoving = true;
                clearTimeout(moveTimeout);
                moveTimeout = setTimeout(() => {
                    isMoving = false;
                    // 淡出轨迹
                    trails.forEach(trail => {
                        trail.element.style.opacity = 0;
                    });
                }, 100);
            };

            // 处理鼠标进入按钮
            const onMouseEnter = (e) => {
                if (e.target.classList.contains('btn')) {
                    cursor.style.transform += ' scale(1.5)';
                    cursor.style.background = 'var(--accent-color)';
                    cursor.style.mixBlendMode = 'screen';
                }
            };

            // 处理鼠标离开按钮
            const onMouseLeave = () => {
                cursor.style.transform = cursor.style.transform.replace(' scale(1.5)', '');
                cursor.style.background = 'var(--primary-color)';
                cursor.style.mixBlendMode = 'screen';
            };

            // 添加事件监听器
            document.addEventListener('mousemove', onMouseMove, { passive: true });
            document.querySelectorAll('.btn').forEach(btn => {
                btn.addEventListener('mouseenter', onMouseEnter);
                btn.addEventListener('mouseleave', onMouseLeave);
            });

            // 处理页面可见性变化
            document.addEventListener('visibilitychange', () => {
                if (document.hidden) {
                    cursor.style.opacity = '0';
                    trails.forEach(trail => {
                        trail.element.style.opacity = '0';
                    });
                } else {
                    cursor.style.opacity = '0.6';
                }
            });

            // 优化性能
            let rafId;
            const render = () => {
                if (isMoving) {
                    trails.forEach((trail, index) => {
                        trail.alpha *= 0.95;
                        trail.element.style.opacity = trail.alpha;
                    });
                }
                rafId = requestAnimationFrame(render);
            };
            render();

            // 清理函数
            window.addEventListener('beforeunload', () => {
                cancelAnimationFrame(rafId);
            });
        }
    })();
</script>
