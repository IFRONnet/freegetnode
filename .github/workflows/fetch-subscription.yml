name: Fetch Subscription

on:
  schedule:
    - cron: '0 0 * * *'  # 每天 UTC 00:00 运行（相当于北京时间 08:00）
  workflow_dispatch:      # 允许手动触发

jobs:
  fetch-and-update:
    runs-on: ubuntu-latest
    permissions:          # 添加权限配置
      contents: write     # 给予写入权限
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}  # 使用 GitHub Token
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Create fetch script
        run: |
          cat > fetch.js << 'EOF'
          const https = require('https');
          const fs = require('fs');
          const path = require('path');

          const CONFIG = {
              uuid: '88888888-8888-8888-8888-888888888888',
              domains: [
                  'https://getfreenodes.com',
                  'https://getafreenode.com'
              ],
              outputDir: 'public/subscribe',
              outputFile: 'subscription.txt',
              userAgent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36'
          };

          async function getUserInfo() {
              for (const domain of CONFIG.domains) {
                  try {
                      const url = `${domain}/main/web_api.php?act=getuserinfo&uuid=${CONFIG.uuid}`;
                      console.log(`Trying to fetch user info from: ${url}`);
                      const response = await fetch(url);
                      const cleanedResponse = response.replace(/<br \/>\n<b>.*?<\/b>.*?<br \/>\n/g, '').trim();
                      const data = JSON.parse(cleanedResponse);
                      console.log('Successfully fetched user info');
                      return data;
                  } catch (error) {
                      console.error(`Failed to fetch user info from ${domain}:`, error.message);
                  }
              }
              return null;
          }

          function createInfoNode(userInfo) {
              const ps = "GetFreeNode - 剩余流量：" + userInfo.remainingTraffic + 
                        " - 速度限制：" + userInfo.speedlimit + "Mbps";
              
              // 创建一个空的 vmess 节点
              const vmessConfig = {
                  v: "2",
                  ps: ps,
                  add: "getfreenode.pages.dev",
                  port: "443",
                  id: CONFIG.uuid,
                  aid: "0",
                  net: "ws",
                  type: "none",
                  host: "getfreenode.pages.dev",
                  path: "/",
                  tls: "tls",
                  sni: "getfreenode.pages.dev"
              };

              return "vmess://" + Buffer.from(JSON.stringify(vmessConfig)).toString('base64');
          }

          function processSubscription(decoded, userInfo) {
              // 添加信息节点到开头
              const lines = decoded.split('\n').filter(line => line.trim() !== '');
              if (userInfo) {
                  lines.unshift(createInfoNode(userInfo));
              }

              return lines
                  .map(line => {
                      if (line.startsWith('vmess://')) {
                          try {
                              const vmessData = Buffer.from(line.slice(8), 'base64').toString();
                              return 'vmess://' + Buffer.from(replaceKeywords(vmessData)).toString('base64');
                          } catch {
                              return line;
                          }
                      }
                      return replaceKeywords(line);
                  })
                  .join('\n');
          }

          function replaceKeywords(text) {
              return text
                  .replace(/-GetAFreeNode\.com/g, '-getfreenode.pages.dev/')
                  .replace(/-GetAFreeNode/g, '-getfreenode.pages.dev/');
          }

          function fetch(url) {
              return new Promise((resolve, reject) => {
                  const options = {
                      headers: {
                          'User-Agent': CONFIG.userAgent
                      }
                  };

                  https.get(url, options, (res) => {
                      let data = '';
                      res.on('data', (chunk) => data += chunk);
                      res.on('end', () => {
                          // 清理 PHP 警告信息，只保留实际内容
                          const cleanedData = data.replace(/<br \/>\n<b>.*?<\/b>.*?<br \/>\n/g, '').trim();
                          resolve(cleanedData);
                      });
                  }).on('error', reject)
                  .setTimeout(5000, () => {
                      reject(new Error('Request timeout'));
                  });
              });
          }

          async function fetchSubscription() {
              // 首先获取用户信息
              const userInfo = await getUserInfo();
              if (!userInfo) {
                  console.warn('Failed to fetch user info from all domains');
              }

              // 然后尝试获取订阅内容
              for (const domain of CONFIG.domains) {
                  try {
                      const url = `${domain}/subscribe/?uuid=${CONFIG.uuid}`;
                      console.log(`Trying to fetch subscription from: ${url}`);
                      
                      const base64Content = await fetch(url);
                      
                      // 验证内容是否为有效的 base64
                      try {
                          const decoded = Buffer.from(base64Content, 'base64').toString();
                          if (!decoded.includes('vmess://') && !decoded.includes('hysteria2://')) {
                              throw new Error('Invalid subscription content');
                          }
                          
                          // 处理订阅内容，替换广告网址并添加信息节点
                          const processedContent = processSubscription(decoded, userInfo);
                          const finalBase64 = Buffer.from(processedContent).toString('base64');
                          
                          // 确保输出目录存在
                          if (!fs.existsSync(CONFIG.outputDir)) {
                              fs.mkdirSync(CONFIG.outputDir, { recursive: true });
                          }
                          
                          // 写入处理后的内容
                          const outputPath = path.join(CONFIG.outputDir, CONFIG.outputFile);
                          fs.writeFileSync(outputPath, finalBase64);
                          
                          console.log('Successfully fetched and saved subscription');
                          return;
                      } catch (error) {
                          console.error('Invalid base64 content or subscription format:', error.message);
                          continue;
                      }
                  } catch (error) {
                      console.error(`Failed to fetch from ${domain}:`, error.message);
                  }
              }
              throw new Error('All domains failed');
          }

          fetchSubscription().catch(error => {
              console.error('Failed to fetch subscription:', error);
              process.exit(1);
          });
          EOF

      - name: Create public directory
        run: mkdir -p public/subscribe
        
      - name: Run fetch script
        run: node fetch.js
        
      - name: Configure Git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          
      - name: Commit and push if changed
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git add public/subscribe/subscription.txt
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Update subscription $(date +'%Y-%m-%d %H:%M:%S')"
            git push origin HEAD:${GITHUB_REF#refs/heads/}
          fi
